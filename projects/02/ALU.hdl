// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // if (zx == 1) set x = 0        // 16-bit constant
    Not(in=zx, out=notZx);
    And16(a=x[0..15], b[0]=notZx, b[1]=notZx, b[2]=notZx, b[3]=notZx, b[4]=notZx, b[5]=notZx, b[6]=notZx, b[7]=notZx, b[8]=notZx, b[9]=notZx, b[10]=notZx, b[11]=notZx, b[12]=notZx, b[13]=notZx, b[14]=notZx, b[15]=notZx, out=zxOut);

    // if (nx == 1) set x = !x       // bitwise not
    Not16(in=zxOut, out=nxTemp);  
    Mux16(a=zxOut, b=nxTemp, sel=nx, out=nxOut);

    // if (zy == 1) set y = 0        // 16-bit constant
    Not(in=zy, out=notZy);
    And16(a=y[0..15], b[0]=notZy, b[1]=notZy, b[2]=notZy, b[3]=notZy, b[4]=notZy, b[5]=notZy, b[6]=notZy, b[7]=notZy, b[8]=notZy, b[9]=notZy, b[10]=notZy, b[11]=notZy, b[12]=notZy, b[13]=notZy, b[14]=notZy, b[15]=notZy, out=zyOut);

    // if (ny == 1) set y = !y       // bitwise not
    Not16(in=zyOut, out=nyTemp);  
    Mux16(a=zyOut, b=nyTemp, sel=ny, out=nyOut);

    // if (f == 1)  set out = x + y  // integer 2's complement addition
    // if (f == 0)  set out = x & y  // bitwise and
    Add16(a=nxOut, b=nyOut, out=xPlusYTemp);
    And16(a=nxOut, b=nyOut, out=xAndY);
    Mux16(a=xAndY, b=xPlusYTemp, sel=f, out=fOut);

    // if (no == 1) set out = !out   // bitwise not
    Not16(in=fOut, out=notFOut);
    Mux16(a=fOut, b=notFOut, sel=no, out=final);
    And16(a=final, b=true, out=out);
    And16(a=final, b=true, out[0..7]=final1, out[8..15]=final2, out[15]=MSB);

    // if (out == 0) set zr = 1
    Or8Way(in=final1, out=zrFront);
    Or8Way(in=final2, out=zrBack);
    Or(a=zrFront, b=zrBack, out=zrNot);
    Not(in=zrNot, out=zr);

    // if (out < 0) set ng = 1
    Nand(a=MSB, b=MSB, out=notNg);
    Not(in=notNg, out=ng);
}